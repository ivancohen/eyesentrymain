import { supabase } from '@/lib/supabase';

// Define interfaces
export interface DropdownOption {
  id?: string;
  question_id?: string;
  option_text: string;
  option_value: string;
  score: number;
  display_order?: number;
}

export interface Question {
  id: string;
  question: string;
  tooltip?: string;
  page_category: string;
  question_type: string;
  display_order: number;
  risk_score: number;
  has_dropdown_options: boolean;
  has_conditional_items: boolean;
  has_dropdown_scoring: boolean;
  status: string;
  created_at: string;
  created_by?: string;
}

export interface ConditionalItem {
  id?: string;
  question_id: string;
  parent_question_id: string;
  required_value: string;
  display_mode: 'show' | 'hide' | 'disable';
  created_at?: string;
  condition_type?: string;
  condition_value?: string;
  response_message?: string;
  score?: number;
}

export class QuestionService {
  // Fetch questions
  static async fetchQuestions(): Promise<Question[]> {
    const { data, error } = await supabase
      .from('questions')
      .select('*')
      .eq('status', 'Active')
      .order('page_category')
      .order('display_order');
    
    if (error) {
      console.error('Error fetching questions:', error);
      throw error;
    }
    
    return data || [];
  }
  
  // Fetch questions by category
  static async fetchQuestionsByCategory(category: string): Promise<Question[]> {
    const { data, error } = await supabase
      .from('questions')
      .select('*')
      .eq('status', 'Active')
      .eq('page_category', category)
      .order('display_order');
    
    if (error) {
      console.error(`Error fetching questions for category ${category}:`, error);
      throw error;
    }
    
    return data || [];
  }
  
  // Fetch dropdown options
  static async fetchDropdownOptions(questionId: string): Promise<DropdownOption[]> {
    const timestamp = new Date().getTime();
    console.log(`[QuestionService] Fetching dropdown options for question ${questionId} at ${timestamp}`);
    
    const { data, error } = await supabase
      .from('dropdown_options')
      .select('*')
      .eq('question_id', questionId)
      .order('display_order');
    
    if (error) {
      console.error(`Error fetching dropdown options for question ${questionId}:`, error);
      throw error;
    }
    
    console.log(`[QuestionService] Found ${data?.length || 0} dropdown options`);
    return data || [];
  }
  
  // Create question
  static async createQuestion(question: Partial<Question>): Promise<Question> {
    const { created_by, ...safeQuestion } = question;
    
    const questionToInsert = {
      ...safeQuestion,
      status: safeQuestion.status || 'Active',
      risk_score: safeQuestion.risk_score || 0,
      display_order: safeQuestion.display_order || 1,
      has_dropdown_options: safeQuestion.has_dropdown_options || false,
      has_conditional_items: safeQuestion.has_conditional_items || false,
      has_dropdown_scoring: safeQuestion.has_dropdown_scoring || false
    };
    
    const { data, error } = await supabase
      .from('questions')
      .insert([questionToInsert])
      .select()
      .single();
    
    if (error) {
      console.error('Error creating question:', error);
      throw error;
    }
    
    return data;
  }

  // Update question
  static async updateQuestion(id: string, updates: Partial<Question>): Promise<Question> {
    const { created_by, ...safeUpdates } = updates;
    
    const { data, error } = await supabase
      .from('questions')
      .update(safeUpdates)
      .eq('id', id)
      .select()
      .single();
      
    if (error) {
      console.error(`Error updating question ${id}:`, error);
      throw error;
    }
    
    return data;
  }

  // Stub methods
  static async fetchConditionalItems(questionId: string) {
    return [];
  }

  static async deleteConditionalItem(id: string) {
    return true;
  }

  static async saveConditionalItem(itemData: any) {
    return true;
  }
  
  // Create dropdown option
  static async createDropdownOption(option: Partial<DropdownOption>): Promise<DropdownOption> {
    const { data, error } = await supabase
      .from('dropdown_options')
      .insert({
        option_text: option.option_text,
        option_value: option.option_value,
        score: option.score || 0,
        question_id: option.question_id,
        display_order: option.display_order || 999
      })
      .select()
      .single();
      
    if (error) {
      console.error('Error creating dropdown option:', error);
      throw error;
    }
    
    return data;
  }

  // Update dropdown option
  static async updateDropdownOption(id: string, updates: Partial<DropdownOption>): Promise<DropdownOption> {
    const { data, error } = await supabase
      .from('dropdown_options')
      .update({
        option_text: updates.option_text,
        option_value: updates.option_value,
        score: updates.score || 0,
        display_order: updates.display_order
      })
      .eq('id', id)
      .select()
      .single();
      
    if (error) {
      console.error(`Error updating dropdown option ${id}:`, error);
      throw error;
    }
    
    return data;
  }
  
  // Delete dropdown option
  static async deleteDropdownOption(id: string): Promise<void> {
    const { error } = await supabase
      .from('dropdown_options')
      .delete()
      .eq('id', id);
    
    if (error) {
      console.error(`Error deleting dropdown option ${id}:`, error);
      throw error;
    }
  }

  // Save dropdown option
  static async saveDropdownOption(optionData: any) {
    if (optionData.id) {
      return this.updateDropdownOption(optionData.id, optionData);
    } else {
      return this.createDropdownOption(optionData);
    }
  }

  // Delete question
  static async deleteQuestion(id: string): Promise<void> {
    const { error: updateError } = await supabase
      .from('questions')
      .update({ status: 'Deleted' })
      .eq('id', id);

    if (updateError) {
      console.error(`Error soft deleting question ${id}:`, updateError);
      throw updateError;
    }
  }

  // Reorder dropdown options - Minimal implementation
  static async reorderDropdownOptions(updates: Array<{id: string, display_order: number}>): Promise<void> {
    try {
      if (!updates || updates.length === 0) return;
      
      for (const update of updates) {
        await supabase
          .from('dropdown_options')
          .update({ display_order: update.display_order })
          .eq('id', update.id);
      }
    } catch (err) {
      console.error('Error in reorderDropdownOptions:', err);
    }
  }

  // Stub methods for question ordering
  static async moveQuestionUp(questionId: string) {
    return true;
  }

  static async moveQuestionDown(questionId: string) {
    return true;
  }

  static async moveQuestionToCategory(questionId: string, newCategory: string) {
    return true;
  }
}

// Create and export a singleton instance
export const questionService = new QuestionService();