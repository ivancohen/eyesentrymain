import { supabase } from '@/lib/supabase'; // Add supabase import

// Define interfaces locally or import if defined elsewhere
export interface DropdownOption { // Added export
  id?: string;
  question_id?: string;
  option_text: string;
  option_value: string;
  score: number;
  display_order?: number;
}

export interface Question { // Added export
  id: string;
  question: string;
  tooltip?: string;
  page_category: string;
  question_type: string;
  display_order: number;
  risk_score: number;
  has_dropdown_options: boolean;
  has_conditional_items: boolean;
  has_dropdown_scoring: boolean;
  status: string;
  created_at: string;
  created_by?: string;
}

// Added missing interface definition
export interface ConditionalItem {
  id?: string;
  question_id: string; // The question this condition applies TO
  parent_question_id: string; // The question this condition depends ON
  required_value: string; // The value the parent question must have
  display_mode: 'show' | 'hide' | 'disable'; // How to affect the child question
  created_at?: string;
  // Add properties expected by ConditionalItemsManager.tsx
  condition_type?: string; // Assuming string type
  condition_value?: string; // Assuming string type
  response_message?: string; // Assuming string type
  score?: number; // Assuming number type
}

// Orphaned code block removed (will be pasted inside the class)

export class QuestionService {
  /**
   * Fetch all active questions from the database
   */
  static async fetchQuestions(): Promise<Question[]> {
    const { data, error } = await supabase
      .from('questions')
      .select('*')
      .eq('status', 'Active')
      .order('page_category')
      .order('display_order');
    
    if (error) {
      console.error('Error fetching questions:', error);
      throw error;
    }
    
    return data || [];
  }
  
  /**
   * Fetch questions by category
   */
  static async fetchQuestionsByCategory(category: string): Promise<Question[]> {
    const { data, error } = await supabase
      .from('questions')
      .select('*')
      .eq('status', 'Active')
      .eq('page_category', category)
      .order('display_order');
    
    if (error) {
      console.error(`Error fetching questions for category ${category}:`, error);
      throw error;
    }
    
    return data || [];
  }
  
  
  /**
   * Fetch dropdown options for a specific question
   * Added timestamp to prevent caching
   */
  static async fetchDropdownOptions(questionId: string): Promise<DropdownOption[]> {
    const timestamp = new Date().getTime(); // Add timestamp to prevent caching
    console.log(`[QuestionService] Fetching dropdown options for question ${questionId} at ${timestamp}`);
    
    const { data, error } = await supabase
      .from('dropdown_options')
      .select('*')
      .eq('question_id', questionId)
      .order('created_at')
      .order('id');
    
    if (error) {
      console.error(`Error fetching dropdown options for question ${questionId}:`, error);
      throw error;
    }
    
    console.log(`[QuestionService] Found ${data?.length || 0} dropdown options`);
    return data || [];
  }
  
  /**
   * Create a new question
   * Modified to handle foreign key constraint for created_by
   */
  static async createQuestion(question: Partial<Question>): Promise<Question> {
    console.log('[QuestionService] Creating new question:', question);
    
    // Remove created_by field to avoid foreign key constraint violation
    const { created_by, ...safeQuestion } = question;
    
    // Set default values for required fields if not provided
    const questionToInsert = {
      ...safeQuestion,
      status: safeQuestion.status || 'Active',
      risk_score: safeQuestion.risk_score || 0,
      display_order: safeQuestion.display_order || 1,
      has_dropdown_options: safeQuestion.has_dropdown_options || false,
      has_conditional_items: safeQuestion.has_conditional_items || false,
      has_dropdown_scoring: safeQuestion.has_dropdown_scoring || false
    };
    
    const { data, error } = await supabase
      .from('questions')
      .insert([questionToInsert])
      .select()
      .single();
    
    if (error) {
      console.error('Error creating question:', error);
      throw error;
    }
    
    console.log('[QuestionService] Question created successfully:', data);
    return data;
  }

  /**
   * Update an existing question
   */
  static async updateQuestion(id: string, updates: Partial<Question>): Promise<Question> {
    console.log(`[QuestionService] Updating question ${id}:`, updates);
    
    // Remove created_by if present to avoid constraint issues
    const { created_by, ...safeUpdates } = updates;
    
    const { data, error } = await supabase
      .from('questions')
      .update(safeUpdates)
      .eq('id', id)
      .select()
      .single();
      
    if (error) {
      console.error(`Error updating question ${id}:`, error);
      throw error;
    }
    
    console.log(`[QuestionService] Question ${id} updated successfully:`, data);
    return data;
  }

  // Missing methods added for TypeScript compatibility

  static async fetchConditionalItems(questionId: string) {
    console.warn("fetchConditionalItems is not fully implemented");
    return [];
  }

  static async deleteConditionalItem(id: string) {
    console.warn("deleteConditionalItem is not fully implemented");
    return true;
  }

  static async saveConditionalItem(itemData: any) {
    console.warn("saveConditionalItem is not fully implemented");
    return true;
  }

  
  /**
   * Create a dropdown option for a question
   */
  static async createDropdownOption(option: Partial<DropdownOption>): Promise<DropdownOption> {
    try {
      // Use the SQL function to avoid ambiguity, using prefixed parameters as hinted by DB error
      const { data, error } = await supabase.rpc('create_dropdown_option', {
        p_option_text: option.option_text,
        p_option_value: option.option_value,
        p_score: option.score || 0,
        p_question_id: option.question_id
      });
      
      if (error) {
        console.error('Error creating dropdown option:', error);
        
        // Fallback to direct insert if RPC fails
        const { data: fallbackData, error: fallbackError } = await supabase
          .from('dropdown_options')
          .insert({
            option_text: option.option_text,
            option_value: option.option_value,
            score: option.score || 0,
            question_id: option.question_id
          })
          .select()
          .single();
          
        if (fallbackError) {
          console.error('Fallback error creating dropdown option:', fallbackError);
          throw fallbackError;
        }
        
        return fallbackData;
      }
      
      return data;
    } catch (error) {
      console.error('Error in createDropdownOption:', error);
      throw error;
    }
  }

  /**
   * Update a dropdown option
   */
  static async updateDropdownOption(id: string, updates: Partial<DropdownOption>): Promise<DropdownOption> {
    try {
      // Use the SQL function to avoid ambiguity, using prefixed parameters
      const { data, error } = await supabase.rpc('update_dropdown_option', {
        p_option_id: id, // Assuming prefix based on create function
        p_option_text: updates.option_text,
        p_option_value: updates.option_value,
        p_score: updates.score || 0
      });
      
      if (error) {
        console.error(`Error updating dropdown option ${id}:`, error);
        
        // Fallback to direct update if RPC fails
        const { data: fallbackData, error: fallbackError } = await supabase
          .from('dropdown_options')
          .update({
            option_text: updates.option_text,
            option_value: updates.option_value,
            score: updates.score || 0
          })
          .eq('id', id)
          .select()
          .single();
          
        if (fallbackError) {
          console.error('Fallback error updating dropdown option:', fallbackError);
          throw fallbackError;
        }
        
        return fallbackData;
      }
      
      return data;
    } catch (error) {
      console.error('Error in updateDropdownOption:', error);
      throw error;
    }
  }
  // Removed duplicated block and extra brace (lines 213-218)
  
  /**
   * Delete a dropdown option
   */
  static async deleteDropdownOption(id: string): Promise<void> {
    const { error } = await supabase
      .from('dropdown_options')
      .delete()
      .eq('id', id);
    
    if (error) {
      console.error(`Error deleting dropdown option ${id}:`, error);
      throw error;
    }
  }

  static async saveDropdownOption(optionData: any) {
    // Keep display_order field
    
    // If the option has an ID, update it; otherwise, create a new one
    if (optionData.id) {
      return this.updateDropdownOption(optionData.id, optionData);
    } else {
      return this.createDropdownOption(optionData);
    }
  }

  /**
   * Delete a question (consider soft delete by updating status instead)
   */
  static async deleteQuestion(id: string): Promise<void> {
    console.log(`[QuestionService] Deleting question ${id}`);
    
    // It's often better to soft delete (update status) than hard delete
    // Example: Update status to 'Deleted'
    const { error: updateError } = await supabase
      .from('questions')
      .update({ status: 'Deleted' }) // Or 'Inactive'
      .eq('id', id);

    if (updateError) {
      console.error(`Error soft deleting question ${id}:`, updateError);
      // Optionally, try hard delete as fallback?
      // const { error: deleteError } = await supabase.from('questions').delete().eq('id', id);
      // if (deleteError) {
      //   console.error(`Error hard deleting question ${id}:`, deleteError);
      //   throw deleteError;
      // }
      throw updateError; // Throw the original error if soft delete fails
    }
    
    console.log(`[QuestionService] Question ${id} marked as deleted.`);
  }

                  
  
  
  
  
  
  
  
  
  
  /**
   * Reorder dropdown options - Direct implementation with debug logging
   */
  static async reorderDropdownOptions(updates: Array<{id: string, display_order: number}>): Promise<void> {
    try {
      console.log('[QuestionService] Reordering dropdown options:', JSON.stringify(updates));
      
      if (!updates || updates.length === 0) {
        console.log('[QuestionService] No updates provided, skipping reordering');
        return;
      }
      
      // Update each dropdown option directly with individual queries
      for (const update of updates) {
        console.log(`[QuestionService] Updating option ${update.id} to display_order ${update.display_order}`);
        
        const { data, error } = await supabase
          .from('dropdown_options')
          .update({ display_order: update.display_order })
          .eq('id', update.id)
          .select();
        
        if (error) {
          console.error(`[QuestionService] Error updating option ${update.id}:`, error);
          throw error;
        }
        
        console.log(`[QuestionService] Successfully updated option ${update.id}`, data);
      }
      
      console.log('[QuestionService] Successfully reordered all dropdown options');
    } catch (err) {
      console.error('[QuestionService] Error in reorderDropdownOptions:', err);
      throw err;
    }
  }